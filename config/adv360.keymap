#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/stp.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hrm: homewrow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            // require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };

        hrs: homewrow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        lh: layer_hold {
          compatible = "zmk,behavior-hold-tap";
          label = "LAYER_HOLD";
          bindings = <&mo>, <&kp>;

          #binding-cells = <2>;
          tapping-term-ms = <200>;
          flavor = "hold-preferred";
        };

        bspc: bspc_del_on_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL_ON_SHIFT";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // the following only USES one argument but requires 2, so pass in the layer as the
        // first param and a dummy value like 0 as second
        lhbs: layer_hold_bspc_override {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD_BSPC_OVERRIDE";
            bindings = <&mo>, <&bspc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        space: space_tab_on_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_TAB_ON_SHIFT";
            bindings = <&kp SPACE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ltsp: layer_tap_space_override {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE_OVERRIDE";
            bindings = <&mo>, <&space>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        comma: comma_semicolon_on_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON_ON_SHIFT";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot: dot_colon_on_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON_ON_SHIFT";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0 1>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            layers = <0 1>;
        };

        // one handed copy/paste on mac
        copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
            layers = <0>;
        };

        // TODO: if the power cycle toggle layer issue has a work around, implement the following combos on that layer
        // one handed cut copy paste for linux and windows
        // copy_lw {
        //     bindings = <&kp LC(C)>;
        //     key-positions = <26 27>;
        //     layers = <1>;
        // };
        //
        // paste_lw {
        //     bindings = <&kp LC(V)>;
        //     key-positions = <27 28>;
        //     layers = <1>;
        // };
        //
        // cut_lw {
        //     bindings = <&kp LC(X)>;
        //     key-positions = <26 28>;
        //     layers = <1>;
        // };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      display-name = "cnr";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                           &mo 4 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp J           &kp L         &kp Y         &kp P           &kp K  &none                                       &none &kp Z      &kp F           &kp O        &kp U          &kp SQT    &kp BSPC
        &mt LCTRL ESCAPE  &hrm LCTRL C    &hrm LALT R   &hrm LGUI S   &hrs LSHIFT T   &kp G  &none           &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none &kp M      &hrs RSHIFT N   &hrm RGUI E  &hrm RALT I    &hrm RCTRL A   &kp ENTER
        &kp LSHFT         &kp W           &kp Q         &kp V         &kp D           &kp B                            &kp HOME &kp PG_UP                           &kp X      &kp H           &kp FSLH     &comma         &dot           &kp RSHIFT
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &lhbs 2 0 &kp ESC   &kp END  &kp PG_DN &kp ENTER &ltsp 3 0              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 3
      >;
    };

    default_layer {
      display-name = "qwr";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 2                                                           &mo 4 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                            &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &lhbs 2 0 &kp DEL   &kp END  &kp PG_DN &kp ENTER &ltsp 3 0               &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 3
      >;
    };

    keypad {
      display-name = "sym";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &trans &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp EXCLAMATION  &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT      &none                                      &none  &kp CARET      &kp AMPS   &kp STAR  &kp TILDE  &kp GRAVE    &kp BSLH
        &kp ESC   &kp LESS_THAN    &kp LBKT   &kp LBRC   &kp LPAR    &kp BSLH         &none           &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none  &kp PIPE       &kp RPAR   &kp RBRC  &kp RBKT   &kp GREATER_THAN     &kp SQT
        &kp LSHFT &kp BSLH         &kp TILDE  &kp GRAVE  &kp COLON   &kp SEMI                                   &kp HOME &kp PG_UP                            &kp UNDER      &kp MINUS  &kp PLUS  &kp EQUAL  &kp QMARK    &kp RSHFT
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp KP_N0               &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 3
      >;
    };
    fn {
      display-name = "nav";
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                           &mo 4 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
        &trans &kp STAR      &kp N7  &kp N8  &kp N9  &kp COMMA  &none                              &none &kp PG_UP  &kp HOME    &kp UP    &kp END    &kp INS  &trans
        &trans &kp KP_MINUS  &kp N4  &kp N5  &kp N6  &kp DOT    &none        &trans &trans &trans &trans        &none &kp PG_DN  &kp LEFT    &kp DOWN  &kp RIGHT  &kp DEL  &trans
        &trans &kp KP_PLUS   &kp N1  &kp N2  &kp N3  &kp TAB                      &trans &trans                 &kp PSCRN  &kp CAPS  &kp CAPS  &kp RSHFT  &sl 4  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      display-name = "bt";
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &studio_unlock &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &stp STP_BAT &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
    extra1 { 
      display-name = "Red";    
      status = "reserved";
    };

    extra2 { 
      display-name = "Purple";    
      status = "reserved";
    };

    extra3 { 
      display-name = "Cyan";    
      status = "reserved";
    };

    extra4 { 
      display-name = "Yellow";    
      status = "reserved";
    };
  };
};
